{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a83bbff",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84502275",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e666be78",
   "metadata": {},
   "source": [
    "### 1. Read in datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f8b5c6b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "codes_mapping = pd.read_excel('srds_customer_identity_adjustment_20220509.xlsx', sheet_name = 'created_proxy_customer_id')\n",
    "\n",
    "df_0 = pd.read_excel('SRDS SALES BY CUSTOMER AND BY DAY Jan 2020 - Jan 2022.xlsx', skiprows = 4, skipfooter = 5, header = 0)\n",
    "\n",
    "df_1 = pd.read_excel('SALES BY CUSTOMER AND BY DAY Feb 2022 - July 2022.xlsx', skiprows = 4, skipfooter = 5, header = 0)\n",
    "\n",
    "df_2 = pd.read_excel('Customers Data by31 Jul 2022.xlsx')\n",
    "\n",
    "df_3 = pd.read_excel('SRDS Partnership AUGUST TO SEPTEMBER 2022.xlsx', sheet_name = 'SALES DATA AUGUST TO SEPTEMBER', skipfooter = 7)\n",
    "\n",
    "df_4 = pd.read_excel('S.R.D.S+Ltd_Sales+by+Customer+Summary (6).xlsx', skiprows = 4, skipfooter = 5)\n",
    "\n",
    "df_5 = pd.read_excel('S.R.D.S+Ltd_Sales+by+Customer+Summary (7).xlsx', skiprows = 4, skipfooter = 5)\n",
    "\n",
    "df_6 = pd.read_excel('S.R.D.S+Ltd_Sales+by+Customer+Summary (10).xlsx', skiprows = 4, skipfooter = 5)\n",
    "\n",
    "df_7 = pd.read_excel('S.R.D.S+Ltd_Sales+by+Customer+Summary NOVEMBER 2022.xlsx', skiprows = 4, skipfooter = 5)\n",
    "\n",
    "df_8 = pd.read_excel('S.R.D.S+Ltd_Sales+by+Customer+Summary December 2022.xlsx', skiprows = 4, skipfooter = 5)\n",
    "\n",
    "df_9 = pd.read_excel('S.R.D.S Sales by Customer Siummary - January 2023.xlsx', skiprows = 4, skipfooter = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40c73fd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>vendors</th>\n",
       "      <th>1 Jan, 2023</th>\n",
       "      <th>2 Jan, 2023</th>\n",
       "      <th>3 Jan, 2023</th>\n",
       "      <th>4 Jan, 2023</th>\n",
       "      <th>5 Jan, 2023</th>\n",
       "      <th>6 Jan, 2023</th>\n",
       "      <th>7 Jan, 2023</th>\n",
       "      <th>8 Jan, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>23 Jan, 2023</th>\n",
       "      <th>24 Jan, 2023</th>\n",
       "      <th>25 Jan, 2023</th>\n",
       "      <th>26 Jan, 2023</th>\n",
       "      <th>27 Jan, 2023</th>\n",
       "      <th>28 Jan, 2023</th>\n",
       "      <th>29 Jan, 2023</th>\n",
       "      <th>30 Jan, 2023</th>\n",
       "      <th>31 Jan, 2023</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78835156301</td>\n",
       "      <td>Bucyana Bannyahe</td>\n",
       "      <td>NaN</td>\n",
       "      <td>457372.88</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>998872.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>788284295</td>\n",
       "      <td>Chantal Nyamirambo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1009661.02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1009661.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7884832250</td>\n",
       "      <td>Claude Rwahama</td>\n",
       "      <td>1134978.8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>568423.73</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1109059.32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5401444.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78835156302</td>\n",
       "      <td>Gakwaya &amp; Gatuza (Nduba)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1011779.66</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>619694.92</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4761189.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>788851050</td>\n",
       "      <td>J.M.V. NYABUGO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1000338.98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2027796.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customer_id                    vendors  1 Jan, 2023  2 Jan, 2023  \\\n",
       "0  78835156301           Bucyana Bannyahe          NaN    457372.88   \n",
       "1    788284295         Chantal Nyamirambo          NaN          NaN   \n",
       "2   7884832250             Claude Rwahama    1134978.8          NaN   \n",
       "3  78835156302  Gakwaya & Gatuza (Nduba)           NaN          NaN   \n",
       "4    788851050             J.M.V. NYABUGO          NaN          NaN   \n",
       "\n",
       "   3 Jan, 2023  4 Jan, 2023  5 Jan, 2023  6 Jan, 2023  7 Jan, 2023  \\\n",
       "0          NaN          NaN          NaN          NaN          NaN   \n",
       "1   1009661.02          NaN          NaN          NaN          NaN   \n",
       "2          NaN          NaN          NaN          NaN          NaN   \n",
       "3          NaN   1011779.66          NaN          NaN          NaN   \n",
       "4          NaN          NaN          NaN          NaN          NaN   \n",
       "\n",
       "   8 Jan, 2023  ...  23 Jan, 2023  24 Jan, 2023  25 Jan, 2023  26 Jan, 2023  \\\n",
       "0          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "1          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "2          NaN  ...     568423.73           NaN           NaN    1109059.32   \n",
       "3          NaN  ...           NaN           NaN     619694.92           NaN   \n",
       "4          NaN  ...    1000338.98           NaN           NaN           NaN   \n",
       "\n",
       "   27 Jan, 2023  28 Jan, 2023  29 Jan, 2023  30 Jan, 2023  31 Jan, 2023  \\\n",
       "0           NaN           NaN           NaN           NaN           NaN   \n",
       "1           NaN           NaN           NaN           NaN           NaN   \n",
       "2           NaN           NaN           NaN           NaN           NaN   \n",
       "3           NaN           NaN           NaN           NaN           NaN   \n",
       "4           NaN           NaN           NaN           NaN           NaN   \n",
       "\n",
       "        Total  \n",
       "0   998872.87  \n",
       "1  1009661.02  \n",
       "2  5401444.89  \n",
       "3  4761189.84  \n",
       "4  2027796.60  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_9.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d77ee2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.float_format', lambda x: '%.0f' % x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d5e6096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vendors</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>1 Feb, 2023</th>\n",
       "      <th>2 Feb, 2023</th>\n",
       "      <th>3 Feb, 2023</th>\n",
       "      <th>4 Feb, 2023</th>\n",
       "      <th>5 Feb, 2023</th>\n",
       "      <th>6 Feb, 2023</th>\n",
       "      <th>7 Feb, 2023</th>\n",
       "      <th>8 Feb, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>20 Feb, 2023</th>\n",
       "      <th>21 Feb, 2023</th>\n",
       "      <th>22 Feb, 2023</th>\n",
       "      <th>23 Feb, 2023</th>\n",
       "      <th>24 Feb, 2023</th>\n",
       "      <th>25 Feb, 2023</th>\n",
       "      <th>26 Feb, 2023</th>\n",
       "      <th>27 Feb, 2023</th>\n",
       "      <th>28 Feb, 2023</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bucyana / Bannyahe</td>\n",
       "      <td>78835156301</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>692593</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1373941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Claude / Rwahama</td>\n",
       "      <td>7884832250</td>\n",
       "      <td>1134979</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>952034</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3066945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gakwaya &amp; Gatuza (Nduba)</td>\n",
       "      <td>78835156302</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1008390</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1714949</td>\n",
       "      <td>4691390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>maurice</td>\n",
       "      <td>785609806</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1002034</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1494610</td>\n",
       "      <td>1125339</td>\n",
       "      <td>6688254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mutsinzi Mugihogere</td>\n",
       "      <td>111454166</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103261</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103261</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    vendors  customer_id  1 Feb, 2023  2 Feb, 2023  \\\n",
       "0        Bucyana / Bannyahe  78835156301          NaN          NaN   \n",
       "1          Claude / Rwahama   7884832250      1134979          NaN   \n",
       "2  Gakwaya & Gatuza (Nduba)  78835156302          NaN          NaN   \n",
       "3                   maurice    785609806          NaN      1002034   \n",
       "4       Mutsinzi Mugihogere    111454166          NaN          NaN   \n",
       "\n",
       "   3 Feb, 2023  4 Feb, 2023  5 Feb, 2023  6 Feb, 2023  7 Feb, 2023  \\\n",
       "0          NaN          NaN          NaN          NaN       692593   \n",
       "1          NaN          NaN          NaN          NaN          NaN   \n",
       "2          NaN          NaN          NaN          NaN          NaN   \n",
       "3          NaN          NaN          NaN          NaN          NaN   \n",
       "4          NaN       103261          NaN          NaN          NaN   \n",
       "\n",
       "   8 Feb, 2023  ...  20 Feb, 2023  21 Feb, 2023  22 Feb, 2023  23 Feb, 2023  \\\n",
       "0          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "1          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "2          NaN  ...           NaN           NaN           NaN       1008390   \n",
       "3          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "4          NaN  ...           NaN           NaN           NaN           NaN   \n",
       "\n",
       "   24 Feb, 2023  25 Feb, 2023  26 Feb, 2023  27 Feb, 2023  28 Feb, 2023  \\\n",
       "0           NaN           NaN           NaN           NaN           NaN   \n",
       "1           NaN        952034           NaN           NaN           NaN   \n",
       "2           NaN           NaN           NaN           NaN       1714949   \n",
       "3           NaN           NaN           NaN       1494610       1125339   \n",
       "4           NaN           NaN           NaN           NaN           NaN   \n",
       "\n",
       "    Total  \n",
       "0 1373941  \n",
       "1 3066945  \n",
       "2 4691390  \n",
       "3 6688254  \n",
       "4  103261  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_10 = pd.read_excel('srds_feb_2023.xlsx')\n",
    "\n",
    "df_10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33812e48",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "88b97a59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vendors</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>1 Mar, 2023</th>\n",
       "      <th>2 Mar, 2023</th>\n",
       "      <th>3 Mar, 2023</th>\n",
       "      <th>4 Mar, 2023</th>\n",
       "      <th>5 Mar, 2023</th>\n",
       "      <th>6 Mar, 2023</th>\n",
       "      <th>7 Mar, 2023</th>\n",
       "      <th>8 Mar, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>23 Mar, 2023</th>\n",
       "      <th>24 Mar, 2023</th>\n",
       "      <th>25 Mar, 2023</th>\n",
       "      <th>26 Mar, 2023</th>\n",
       "      <th>27 Mar, 2023</th>\n",
       "      <th>28 Mar, 2023</th>\n",
       "      <th>29 Mar, 2023</th>\n",
       "      <th>30 Mar, 2023</th>\n",
       "      <th>31 Mar, 2023</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Augustin</td>\n",
       "      <td>788815064</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>524110</td>\n",
       "      <td>NaN</td>\n",
       "      <td>811678</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>541695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>436576</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3582034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bucyana / Bannyahe</td>\n",
       "      <td>78835156301</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>659754</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1162042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Claude / Rwahama</td>\n",
       "      <td>7884832250</td>\n",
       "      <td>2678390</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>926153</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1070678</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1106305</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14979939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>clementine</td>\n",
       "      <td>783059997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>469644</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>476847</td>\n",
       "      <td>413017</td>\n",
       "      <td>1744178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dative Batsinda</td>\n",
       "      <td>788563675</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2501856</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2501856</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              vendors  customer_id  1 Mar, 2023  2 Mar, 2023  3 Mar, 2023  \\\n",
       "0            Augustin    788815064          NaN          NaN       524110   \n",
       "1  Bucyana / Bannyahe  78835156301          NaN          NaN          NaN   \n",
       "2    Claude / Rwahama   7884832250      2678390          NaN          NaN   \n",
       "3          clementine    783059997          NaN          NaN       469644   \n",
       "4     Dative Batsinda    788563675          NaN      2501856          NaN   \n",
       "\n",
       "   4 Mar, 2023  5 Mar, 2023  6 Mar, 2023  7 Mar, 2023  8 Mar, 2023  ...  \\\n",
       "0          NaN       811678          NaN          NaN          NaN  ...   \n",
       "1          NaN          NaN          NaN          NaN       659754  ...   \n",
       "2          NaN       926153          NaN          NaN          NaN  ...   \n",
       "3          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "4          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "\n",
       "   23 Mar, 2023  24 Mar, 2023  25 Mar, 2023  26 Mar, 2023  27 Mar, 2023  \\\n",
       "0           NaN           NaN           NaN        541695           NaN   \n",
       "1           NaN           NaN           NaN           NaN           NaN   \n",
       "2           NaN           NaN           NaN           NaN       1070678   \n",
       "3           NaN           NaN           NaN           NaN           NaN   \n",
       "4           NaN           NaN           NaN           NaN           NaN   \n",
       "\n",
       "   28 Mar, 2023  29 Mar, 2023  30 Mar, 2023  31 Mar, 2023    Total  \n",
       "0        436576           NaN           NaN           NaN  3582034  \n",
       "1           NaN           NaN           NaN           NaN  1162042  \n",
       "2           NaN           NaN       1106305           NaN 14979939  \n",
       "3           NaN           NaN        476847        413017  1744178  \n",
       "4           NaN           NaN           NaN           NaN  2501856  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_11 = pd.read_excel('srds_march_2023.xlsx')\n",
    "\n",
    "df_11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0c162a3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f885211",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vendors</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>1 Apr, 2023</th>\n",
       "      <th>2 Apr, 2023</th>\n",
       "      <th>3 Apr, 2023</th>\n",
       "      <th>4 Apr, 2023</th>\n",
       "      <th>5 Apr, 2023</th>\n",
       "      <th>6 Apr, 2023</th>\n",
       "      <th>7 Apr, 2023</th>\n",
       "      <th>8 Apr, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>22 Apr, 2023</th>\n",
       "      <th>23 Apr, 2023</th>\n",
       "      <th>24 Apr, 2023</th>\n",
       "      <th>25 Apr, 2023</th>\n",
       "      <th>26 Apr, 2023</th>\n",
       "      <th>27 Apr, 2023</th>\n",
       "      <th>28 Apr, 2023</th>\n",
       "      <th>29 Apr, 2023</th>\n",
       "      <th>30 Apr, 2023</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Augustin</td>\n",
       "      <td>788815064</td>\n",
       "      <td>NaN</td>\n",
       "      <td>667805</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>532797</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bucyana / Bannyahe</td>\n",
       "      <td>78835156301</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>853856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Claude / Rwahama</td>\n",
       "      <td>7884832250</td>\n",
       "      <td>880390</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1280508</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1022585</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2580475</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9929068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>clementine</td>\n",
       "      <td>783059997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>442720</td>\n",
       "      <td>NaN</td>\n",
       "      <td>479390</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>326373</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1770093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>David / Birembo</td>\n",
       "      <td>788463450</td>\n",
       "      <td>NaN</td>\n",
       "      <td>643463</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>423395</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3224093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              vendors  customer_id  1 Apr, 2023  2 Apr, 2023  3 Apr, 2023  \\\n",
       "0            Augustin    788815064          NaN       667805          NaN   \n",
       "1  Bucyana / Bannyahe  78835156301          NaN          NaN          NaN   \n",
       "2    Claude / Rwahama   7884832250       880390          NaN          NaN   \n",
       "3          clementine    783059997          NaN          NaN          NaN   \n",
       "4     David / Birembo    788463450          NaN       643463          NaN   \n",
       "\n",
       "   4 Apr, 2023  5 Apr, 2023  6 Apr, 2023  7 Apr, 2023  8 Apr, 2023  ...  \\\n",
       "0          NaN       532797          NaN          NaN          NaN  ...   \n",
       "1          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "2      1280508          NaN      1022585          NaN          NaN  ...   \n",
       "3          NaN       442720          NaN       479390          NaN  ...   \n",
       "4          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "\n",
       "   22 Apr, 2023  23 Apr, 2023  24 Apr, 2023  25 Apr, 2023  26 Apr, 2023  \\\n",
       "0           NaN           NaN           NaN           NaN           NaN   \n",
       "1           NaN           NaN           NaN           NaN           NaN   \n",
       "2           NaN           NaN           NaN           NaN           NaN   \n",
       "3           NaN        326373           NaN           NaN           NaN   \n",
       "4           NaN        423395           NaN           NaN           NaN   \n",
       "\n",
       "   27 Apr, 2023  28 Apr, 2023  29 Apr, 2023  30 Apr, 2023   Total  \n",
       "0           NaN           NaN           NaN           NaN 1200602  \n",
       "1           NaN           NaN           NaN           NaN  853856  \n",
       "2       2580475           NaN           NaN           NaN 9929068  \n",
       "3           NaN           NaN           NaN           NaN 1770093  \n",
       "4           NaN           NaN           NaN           NaN 3224093  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_12 = pd.read_excel('srds_april_2023.xlsx')\n",
    "\n",
    "df_12.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8df27738-18b6-491c-8a41-b354e1419a13",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4da9203b-64c3-4dfa-96cd-5f89b1ff56f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vendors</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>1 May, 2023</th>\n",
       "      <th>2 May, 2023</th>\n",
       "      <th>3 May, 2023</th>\n",
       "      <th>4 May, 2023</th>\n",
       "      <th>5 May, 2023</th>\n",
       "      <th>6 May, 2023</th>\n",
       "      <th>7 May, 2023</th>\n",
       "      <th>8 May, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>23 May, 2023</th>\n",
       "      <th>24 May, 2023</th>\n",
       "      <th>25 May, 2023</th>\n",
       "      <th>26 May, 2023</th>\n",
       "      <th>27 May, 2023</th>\n",
       "      <th>28 May, 2023</th>\n",
       "      <th>29 May, 2023</th>\n",
       "      <th>30 May, 2023</th>\n",
       "      <th>31 May, 2023</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>maurice</td>\n",
       "      <td>785609806</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2431712</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>408153</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1947025</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7917169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ntwari Yvette</td>\n",
       "      <td>786210588</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91136</td>\n",
       "      <td>1248920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>436381</td>\n",
       "      <td>NaN</td>\n",
       "      <td>202610</td>\n",
       "      <td>...</td>\n",
       "      <td>285649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>151534</td>\n",
       "      <td>228263</td>\n",
       "      <td>339508</td>\n",
       "      <td>93678</td>\n",
       "      <td>176127</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4552336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gisimenti Sales</td>\n",
       "      <td>11966460601</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kacyiru Sales</td>\n",
       "      <td>11966460602</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kinyinya Sales</td>\n",
       "      <td>11966460603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           vendors  customer_id  1 May, 2023  2 May, 2023  3 May, 2023  \\\n",
       "0          maurice    785609806          NaN          NaN      2431712   \n",
       "1    Ntwari Yvette    786210588          NaN        91136      1248920   \n",
       "2  Gisimenti Sales  11966460601          NaN          NaN          NaN   \n",
       "3    Kacyiru Sales  11966460602          NaN          NaN          NaN   \n",
       "4   Kinyinya Sales  11966460603          NaN          NaN          NaN   \n",
       "\n",
       "   4 May, 2023  5 May, 2023  6 May, 2023  7 May, 2023  8 May, 2023  ...  \\\n",
       "0          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "1          NaN          NaN       436381          NaN       202610  ...   \n",
       "2          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "3          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "4          NaN          NaN          NaN          NaN          NaN  ...   \n",
       "\n",
       "   23 May, 2023  24 May, 2023  25 May, 2023  26 May, 2023  27 May, 2023  \\\n",
       "0           NaN           NaN           NaN        408153           NaN   \n",
       "1        285649           NaN        151534        228263        339508   \n",
       "2           NaN           NaN           NaN           NaN           NaN   \n",
       "3           NaN           NaN           NaN           NaN           NaN   \n",
       "4           NaN           NaN           NaN           NaN           NaN   \n",
       "\n",
       "   28 May, 2023  29 May, 2023  30 May, 2023  31 May, 2023   Total  \n",
       "0           NaN           NaN       1947025           NaN 7917169  \n",
       "1         93678        176127           NaN           NaN 4552336  \n",
       "2           NaN           NaN           NaN           NaN     NaN  \n",
       "3           NaN           NaN           NaN           NaN     NaN  \n",
       "4           NaN           NaN           NaN           NaN     NaN  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_13 = pd.read_excel('srds_may_2023.xlsx')\n",
    "\n",
    "df_13.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70d7ea57-03a6-4659-b03b-4ab3078924c1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26aa32ff-52d5-4edb-be40-7fa9c8692ad4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6f26909-7556-4955-a069-5cf8d3ae8169",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "34ca3029",
   "metadata": {},
   "source": [
    "### 2. Cleaning datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d89b586b",
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_to_str = [\"original_customer_id\",\"proxy_customer_id\"]\n",
    "codes_mapping[cols_to_str] = codes_mapping[cols_to_str].astype(\"str\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3cee4b00",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_first_dataset(df):\n",
    "    \n",
    "    df.drop(columns = [\"Total\",\"SUCCESS\"], inplace = True)\n",
    "    \n",
    "    #rename Unnamed: O column\n",
    "    df.rename(columns = {\"Unnamed: 0\":\"vendors\"}, inplace = True)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5a40a92",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8ab543bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_second_dataset(df):\n",
    "    df.drop(columns = [\"Total\", \"Unnamed: 1\", \"Unnamed: 2\"], inplace = True)\n",
    "    \n",
    "    df.rename(columns = {\"Unnamed: 0\":\"vendors\"}, inplace = True)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "398cf85f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e33bd1c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_fourth_dataset(df):\n",
    "    df.drop(['Total','Unnamed: 2','Unnamed: 3'], axis = 'columns', inplace = True)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "515118bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "03e7cc2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_standard_dataset(df):\n",
    "    df.drop('Total', axis = 'columns', inplace = True)\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f3cd654",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a4513216",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Applying cleaning functions\n",
    "\n",
    "df_0_cleaned = clean_first_dataset(df_0)\n",
    "\n",
    "df_1_cleaned = clean_second_dataset(df_1)\n",
    "\n",
    "df_2_cleaned = clean_standard_dataset(df_2)\n",
    "\n",
    "df_3_cleaned = clean_standard_dataset(df_3)\n",
    "\n",
    "df_4_cleaned = clean_fourth_dataset(df_4)\n",
    "\n",
    "df_5_cleaned = clean_standard_dataset(df_5)\n",
    "\n",
    "df_6_cleaned = clean_standard_dataset(df_6)\n",
    "\n",
    "df_7_cleaned = clean_standard_dataset(df_7)\n",
    "\n",
    "df_8_cleaned = clean_standard_dataset(df_8)\n",
    "\n",
    "df_9_cleaned = clean_standard_dataset(df_9)\n",
    "\n",
    "df_10_cleaned = clean_standard_dataset(df_10)\n",
    "\n",
    "df_11_cleaned = clean_standard_dataset(df_11)\n",
    "\n",
    "df_12_cleaned = clean_standard_dataset(df_12)\n",
    "\n",
    "df_13_cleaned = clean_standard_dataset(df_13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81899a5b-b6c5-472d-a9be-026bda9cb9b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96c254e4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9b5c908c",
   "metadata": {},
   "source": [
    "### 3. Melting dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d661626d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def melt_first_two_dfs(df, codes):\n",
    "    \n",
    "    \"\"\"Melt dataframe.\"\"\"\n",
    "    \n",
    "    df_melted = pd.melt(df, id_vars = 'vendors', var_name  = 'date_time', value_name = 'invoice_value')\n",
    "    \n",
    "    df_melted['vendors'] = df_melted['vendors'].str.strip()\n",
    "\n",
    "    df_melted['vendors'] = [x.replace('/ ', '') for x in df_melted['vendors']]\n",
    "    \n",
    "    \n",
    "    df_melted_final = pd.merge(codes_mapping, df_melted, on = 'vendors')\n",
    "    \n",
    "    ids = df_melted_final['proxy_customer_id']\n",
    "\n",
    "    df_melted_final.drop(['original_customer_id','proxy_customer_id'], axis = 'columns', inplace = True)\n",
    "\n",
    "    df_melted_final.insert(0, 'customer_id', ids)\n",
    "\n",
    "    df_melted_final['customer_id'] = df_melted_final['customer_id'].astype('int64')\n",
    "    \n",
    "    return df_melted_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9d64dbe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8c09c43c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def melt_standard_dfs(df, codes):\n",
    "    \n",
    "    \"\"\"Melt dataframe.\"\"\"\n",
    "    \n",
    "    df_melted = pd.melt(df, id_vars = ['customer_id','vendors'], var_name  = 'date_time', value_name = 'invoice_value')\n",
    "    \n",
    "    df_melted['vendors'] = df_melted['vendors'].str.strip()\n",
    "\n",
    "    df_melted['vendors'] = [x.replace('/ ', '') for x in df_melted['vendors']]\n",
    "    \n",
    "    df_melted['customer_id'] = df_melted['customer_id'].astype('int64')\n",
    "    \n",
    "    return df_melted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5f42279",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cf2e004",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d855febb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vendors</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>1 May, 2023</th>\n",
       "      <th>2 May, 2023</th>\n",
       "      <th>3 May, 2023</th>\n",
       "      <th>4 May, 2023</th>\n",
       "      <th>5 May, 2023</th>\n",
       "      <th>6 May, 2023</th>\n",
       "      <th>7 May, 2023</th>\n",
       "      <th>8 May, 2023</th>\n",
       "      <th>...</th>\n",
       "      <th>22 May, 2023</th>\n",
       "      <th>23 May, 2023</th>\n",
       "      <th>24 May, 2023</th>\n",
       "      <th>25 May, 2023</th>\n",
       "      <th>26 May, 2023</th>\n",
       "      <th>27 May, 2023</th>\n",
       "      <th>28 May, 2023</th>\n",
       "      <th>29 May, 2023</th>\n",
       "      <th>30 May, 2023</th>\n",
       "      <th>31 May, 2023</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [vendors, customer_id, 1 May, 2023, 2 May, 2023, 3 May, 2023, 4 May, 2023, 5 May, 2023, 6 May, 2023, 7 May, 2023, 8 May, 2023, 9 May, 2023, 10 May, 2023, 11 May, 2023, 12 May, 2023, 13 May, 2023, 14 May, 2023, 15 May, 2023, 16 May, 2023, 17 May, 2023, 18 May, 2023, 19 May, 2023, 20 May, 2023, 21 May, 2023, 22 May, 2023, 23 May, 2023, 24 May, 2023, 25 May, 2023, 26 May, 2023, 27 May, 2023, 28 May, 2023, 29 May, 2023, 30 May, 2023, 31 May, 2023]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 33 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_13_cleaned[df_13_cleaned['customer_id'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7362c937",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Applying melting functions\n",
    "\n",
    "df_0_melted = melt_first_two_dfs(df_0_cleaned, codes_mapping)\n",
    "\n",
    "df_1_melted = melt_first_two_dfs(df_1_cleaned, codes_mapping)\n",
    "\n",
    "df_2_melted = melt_standard_dfs(df_2_cleaned, codes_mapping)\n",
    "\n",
    "df_3_melted = melt_standard_dfs(df_3_cleaned, codes_mapping)\n",
    "\n",
    "df_4_melted = melt_standard_dfs(df_4_cleaned, codes_mapping)\n",
    "\n",
    "df_5_melted = melt_standard_dfs(df_5_cleaned, codes_mapping)\n",
    "\n",
    "df_6_melted = melt_standard_dfs(df_6_cleaned, codes_mapping)\n",
    "\n",
    "df_7_melted = melt_standard_dfs(df_7_cleaned, codes_mapping)\n",
    "\n",
    "df_8_melted = melt_standard_dfs(df_8_cleaned, codes_mapping)\n",
    "\n",
    "df_9_melted = melt_standard_dfs(df_9_cleaned, codes_mapping)\n",
    "\n",
    "df_10_melted = melt_standard_dfs(df_10_cleaned, codes_mapping)\n",
    "\n",
    "df_11_melted = melt_standard_dfs(df_11_cleaned, codes_mapping)\n",
    "\n",
    "df_12_melted = melt_standard_dfs(df_12_cleaned, codes_mapping)\n",
    "\n",
    "df_13_melted = melt_standard_dfs(df_13_cleaned, codes_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe6a43ca",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ba48100",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "92f189f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>vendors</th>\n",
       "      <th>date_time</th>\n",
       "      <th>invoice_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11966460601</td>\n",
       "      <td>Gisimenti Sales</td>\n",
       "      <td>1 Jan, 2020</td>\n",
       "      <td>1351269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11966460601</td>\n",
       "      <td>Gisimenti Sales</td>\n",
       "      <td>2 Jan, 2020</td>\n",
       "      <td>1600188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customer_id          vendors    date_time  invoice_value\n",
       "0  11966460601  Gisimenti Sales  1 Jan, 2020        1351269\n",
       "1  11966460601  Gisimenti Sales  2 Jan, 2020        1600188"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## concat all dataframes\n",
    "\n",
    "final_df = pd.concat([df_0_melted,df_1_melted, df_2_melted, df_3_melted, df_4_melted, df_5_melted, \n",
    "                      df_6_melted, df_7_melted, df_8_melted, df_9_melted, df_10_melted, \n",
    "                      df_11_melted, df_12_melted, df_13_melted])\n",
    "\n",
    "final_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e9346f4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## As data is shared with overlapping dates, drop duplicates\n",
    "\n",
    "final_df.drop_duplicates(keep = 'last', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "19d50753",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(22785, 4)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "93b0eaab",
   "metadata": {},
   "outputs": [],
   "source": [
    "## convert date_time column to datetime and drop any null values\n",
    "\n",
    "final_df['date_time'] = [datetime.strptime(x, '%d %b, %Y') for x in final_df['date_time']]\n",
    "    \n",
    "final_df.dropna(axis = 0, subset = [\"invoice_value\"], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "345a957f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4898 entries, 0 to 1044\n",
      "Data columns (total 4 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   customer_id    4898 non-null   int64         \n",
      " 1   vendors        4898 non-null   object        \n",
      " 2   date_time      4898 non-null   datetime64[ns]\n",
      " 3   invoice_value  4898 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 191.3+ KB\n"
     ]
    }
   ],
   "source": [
    "final_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "48f4837f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/jupyter-fiona.kamau/jupyter-notebooks/Rwanda/SRDS/rw_srds_bralirwa/data/external'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e6eff26c-8dfc-4273-8018-5d5e609f7cda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Gisimenti Sales', 'Kacyiru Sales', 'Kinyinya Sales',\n",
       "       'Bucyana Bannyahe', 'Gakwaya & Gatuza (Nduba)', 'Alfred Gasanze',\n",
       "       'Damascene', 'Karangwa', 'Murindwa', 'Mutsinzi Mugihogere',\n",
       "       'Nyabitare Bonaventure', 'Peter', 'Selemani Nyamirambo', 'Sultan',\n",
       "       'Xavier', 'Claude Rwahama', 'maurice', 'Nkunsi Kicukiro',\n",
       "       'Ntwari Yvette', 'Chantal Nyamirambo', 'Diane Kacyiru', 'MICHELLE',\n",
       "       'Flora', 'David Birembo', 'Augustin', 'Gentille', 'Ngenzi',\n",
       "       'clementine', 'Oliva Nyanza', 'J.M.V. NYABUGO', 'Dative Batsinda',\n",
       "       'Yvonne Rwimpyisi', 'Raphael Kanombe', 'theogene', 'PLACIDE'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['vendors'].replace('Raphael /Kanombe', 'Raphael Kanombe', inplace = True)\n",
    "\n",
    "final_df['vendors'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc4a8dd4-cdc2-46d2-b22f-3a9ee38e85af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b9b0626d",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df.to_csv('/home/jupyter-fiona.kamau/jupyter-notebooks/Rwanda/SRDS/rw_srds_bralirwa/data/interim/cleaned_analysis_data.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3262803",
   "metadata": {},
   "outputs": [],
   "source": [
    "## dvc to track the files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "49857747",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Gisimenti Sales', 'Kacyiru Sales', 'Kinyinya Sales',\n",
       "       'Bucyana Bannyahe', 'Gakwaya & Gatuza (Nduba)', 'Alfred Gasanze',\n",
       "       'Damascene', 'Karangwa', 'Murindwa', 'Mutsinzi Mugihogere',\n",
       "       'Nyabitare Bonaventure', 'Peter', 'Selemani Nyamirambo', 'Sultan',\n",
       "       'Xavier', 'Claude Rwahama', 'maurice', 'Nkunsi Kicukiro',\n",
       "       'Ntwari Yvette', 'Chantal Nyamirambo', 'Diane Kacyiru', 'MICHELLE',\n",
       "       'Flora', 'David Birembo', 'Augustin', 'Gentille', 'Ngenzi',\n",
       "       'clementine', 'Oliva Nyanza', 'J.M.V. NYABUGO', 'Dative Batsinda',\n",
       "       'Yvonne Rwimpyisi', 'Raphael /Kanombe', 'theogene', 'PLACIDE',\n",
       "       'Raphael Kanombe'], dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['vendors'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "329147ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>vendors</th>\n",
       "      <th>date_time</th>\n",
       "      <th>invoice_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-03-07</td>\n",
       "      <td>965364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-03-09</td>\n",
       "      <td>555483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-03-11</td>\n",
       "      <td>1113725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-03-13</td>\n",
       "      <td>668000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>1517124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-04-13</td>\n",
       "      <td>1341451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-04-15</td>\n",
       "      <td>1020008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>785668447</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-04-26</td>\n",
       "      <td>231000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     customer_id          vendors  date_time  invoice_value\n",
       "135    785668447  Raphael Kanombe 2023-03-07         965364\n",
       "175    785668447  Raphael Kanombe 2023-03-09         555483\n",
       "215    785668447  Raphael Kanombe 2023-03-11        1113725\n",
       "255    785668447  Raphael Kanombe 2023-03-13         668000\n",
       "295    785668447  Raphael Kanombe 2023-03-15        1517124\n",
       "203    785668447  Raphael Kanombe 2023-04-13        1341451\n",
       "235    785668447  Raphael Kanombe 2023-04-15        1020008\n",
       "411    785668447  Raphael Kanombe 2023-04-26         231000"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[final_df['vendors'] == 'Raphael Kanombe']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c71b0a0d-fa88-420d-b6ee-3f5cb72204c0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47d0b975-4282-4bd3-91f8-88bb8cd606bb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "raw",
   "id": "f1a6eda8",
   "metadata": {},
   "source": [
    "def create_tables():\n",
    "    try:\n",
    "        conn = psycopg2.connect(\n",
    "            database=\"ubuntu\",\n",
    "            user=\"fionamurugi\",\n",
    "            password=\"?xM9C<rJ\",\n",
    "            host=\"157.245.248.249\",\n",
    "            port=\"5432\"\n",
    "        )\n",
    "        \n",
    "    except:\n",
    "        print(\"Unable to connect to the database\") \n",
    "        \n",
    "    cur = conn.cursor()\n",
    "    \n",
    "    try:\n",
    "        # Execute a command: this creates a new table\n",
    "        #cur.execute('DROP TABLE IF EXISTS obradleys_eabl.processed_trx_data_obradleys;')\n",
    "        cur.execute('CREATE TABLE stockpoint.scoring_summaries_srds'\n",
    "                    '('\n",
    "                    'id serial PRIMARY KEY,'\n",
    "                    'customer_id varchar (150) NOT NULL,'\n",
    "                    'earliest_sales_date date NOT NULL,'\n",
    "                    'most_recent_sales_date date NOT NULL,'\n",
    "                    'age_on_network_months int NOT NULL,'\n",
    "                    'vendors varchar (150) NOT NULL,'\n",
    "                    'most_recent_sales_date_last_6_months date NOT NULL,'\n",
    "                    'earliest_sales_date_last_6_months date NOT NULL,'\n",
    "                    'total_value_last_6_months numeric NOT NULL,'\n",
    "                    'trading_span_past_6_months int NOT NULL,'\n",
    "                    'unique_sales_months int NOT NULL,'\n",
    "                    'trading_consistency numeric NOT NULL,'\n",
    "                    'average_monthly_value_last_6_months numeric NOT NULL,'\n",
    "                    'gross_14_day_limit numeric NOT NULL,'\n",
    "                    'adjusted_14_day_limit numeric NOT NULL,'\n",
    "                    'final_14_day_limit_rwf numeric NOT NULL,'\n",
    "                    'scoring_refresh_date date NOT NULL,'\n",
    "                    'model_version varchar (150),'\n",
    "                    'new_final_limit numeric,'\n",
    "                    'is_qualifid boolean,'\n",
    "                    'created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL'\n",
    "                    ');'\n",
    "                   )\n",
    "\n",
    "    except:\n",
    "        print(\"Something is not going as expected!\")\n",
    "    \n",
    "    conn.commit() # <--- makes sure the change is shown in the database\n",
    "    conn.close()\n",
    "    cur.close()\n",
    "    \n",
    "#run function\n",
    "create_tables()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32e5f030",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "076cc125",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f17342e6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f876780e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f28dba7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fd389b3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd8c2878",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fiona.kamau",
   "language": "python",
   "name": "fiona.kamau"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
