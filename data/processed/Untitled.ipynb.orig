{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9ca74ae5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "be5395f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>proxy_customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>previous_limit</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>rules_summary_narration</th>\n",
       "      <th>limit_reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2020-02-12</td>\n",
       "      <td>2025-02-02</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>2025-02-02</td>\n",
       "      <td>2025-02-02</td>\n",
       "      <td>2773050.85</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>161800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2023-07-27</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-27]</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2025-06-04</td>\n",
       "      <td>66.0</td>\n",
       "      <td>Peter</td>\n",
       "      <td>2025-06-04</td>\n",
       "      <td>2025-02-04</td>\n",
       "      <td>4565457.64</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>159800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2023-07-27</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-27]</td>\n",
       "      <td>1696725.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>783059997</td>\n",
       "      <td>2022-01-11</td>\n",
       "      <td>2025-07-03</td>\n",
       "      <td>42.0</td>\n",
       "      <td>clementine</td>\n",
       "      <td>2025-07-03</td>\n",
       "      <td>2025-06-03</td>\n",
       "      <td>889864.42</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2023-07-27</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-27]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>783241911</td>\n",
       "      <td>2022-01-05</td>\n",
       "      <td>2025-02-04</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Nkunsi Kicukiro</td>\n",
       "      <td>2025-02-04</td>\n",
       "      <td>2025-02-04</td>\n",
       "      <td>352220.34</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20600.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2023-07-27</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-27]</td>\n",
       "      <td>803500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>785609806</td>\n",
       "      <td>2022-01-05</td>\n",
       "      <td>2025-07-01</td>\n",
       "      <td>42.0</td>\n",
       "      <td>maurice</td>\n",
       "      <td>2025-07-01</td>\n",
       "      <td>2025-01-04</td>\n",
       "      <td>12280025.41</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>716400.0</td>\n",
       "      <td>716400.0</td>\n",
       "      <td>702.352941</td>\n",
       "      <td>2023-07-27</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-27]</td>\n",
       "      <td>2822400.0</td>\n",
       "      <td>2822400.0</td>\n",
       "      <td>True</td>\n",
       "      <td>All rules passed(limit maintained)</td>\n",
       "      <td>F001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   proxy_customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "0          101486430          2020-02-12             2025-02-02   \n",
       "1          102500107          2020-01-02             2025-06-04   \n",
       "2          783059997          2022-01-11             2025-07-03   \n",
       "3          783241911          2022-01-05             2025-02-04   \n",
       "4          785609806          2022-01-05             2025-07-01   \n",
       "\n",
       "   age_on_network_months              vendors  \\\n",
       "0                   60.0  Selemani Nyamirambo   \n",
       "1                   66.0                Peter   \n",
       "2                   42.0           clementine   \n",
       "3                   37.0      Nkunsi Kicukiro   \n",
       "4                   42.0              maurice   \n",
       "\n",
       "  most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "0                           2025-02-02                        2025-02-02   \n",
       "1                           2025-06-04                        2025-02-04   \n",
       "2                           2025-07-03                        2025-06-03   \n",
       "3                           2025-02-04                        2025-02-04   \n",
       "4                           2025-07-01                        2025-01-04   \n",
       "\n",
       "   total_value_last_6_months  trading_span_past_6_months  unique_sales_months  \\\n",
       "0                 2773050.85                         1.0                  1.0   \n",
       "1                 4565457.64                         5.0                  3.0   \n",
       "2                  889864.42                         2.0                  2.0   \n",
       "3                  352220.34                         1.0                  1.0   \n",
       "4                12280025.41                         7.0                  7.0   \n",
       "\n",
       "   ...  adjusted_14_day_limit  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "0  ...               161800.0                     0.0                0.000000   \n",
       "1  ...               159800.0                     0.0                0.000000   \n",
       "2  ...                52000.0                     0.0                0.000000   \n",
       "3  ...                20600.0                     0.0                0.000000   \n",
       "4  ...               716400.0                716400.0              702.352941   \n",
       "\n",
       "   scoring_refresh_date                     model_version  previous_limit  \\\n",
       "0            2023-07-27  2023-001[2023-02-16, 2023-07-27]       2757600.0   \n",
       "1            2023-07-27  2023-001[2023-02-16, 2023-07-27]       1696725.0   \n",
       "2            2023-07-27  2023-001[2023-02-16, 2023-07-27]             0.0   \n",
       "3            2023-07-27  2023-001[2023-02-16, 2023-07-27]        803500.0   \n",
       "4            2023-07-27  2023-001[2023-02-16, 2023-07-27]       2822400.0   \n",
       "\n",
       "   new_final_limit is_qualified                       rules_summary_narration  \\\n",
       "0              0.0        False  Limits assigned less than product thresholds   \n",
       "1              0.0        False  Limits assigned less than product thresholds   \n",
       "2              0.0        False  Limits assigned less than product thresholds   \n",
       "3              0.0        False  Limits assigned less than product thresholds   \n",
       "4        2822400.0         True            All rules passed(limit maintained)   \n",
       "\n",
       "   limit_reason  \n",
       "0          D001  \n",
       "1          D001  \n",
       "2          D001  \n",
       "3          D001  \n",
       "4          F001  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('processed_scoring_summaries_with_limits.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7dfa3107-beb1-4e0f-829e-8141f35f101c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 29 entries, 0 to 28\n",
      "Data columns (total 24 columns):\n",
      " #   Column                                Non-Null Count  Dtype  \n",
      "---  ------                                --------------  -----  \n",
      " 0   proxy_customer_id                     29 non-null     int64  \n",
      " 1   earliest_sales_date                   15 non-null     object \n",
      " 2   most_recent_sales_date                15 non-null     object \n",
      " 3   age_on_network_months                 15 non-null     float64\n",
      " 4   vendors                               15 non-null     object \n",
      " 5   most_recent_sales_date_last_6_months  15 non-null     object \n",
      " 6   earliest_sales_date_last_6_months     15 non-null     object \n",
      " 7   total_value_last_6_months             15 non-null     float64\n",
      " 8   trading_span_past_6_months            15 non-null     float64\n",
      " 9   unique_sales_months                   15 non-null     float64\n",
      " 10  trading_consistency_last_6_months     15 non-null     float64\n",
      " 11  diff_last_txn_months                  15 non-null     float64\n",
      " 12  average_monthly_value_last_6_months   15 non-null     float64\n",
      " 13  gross_14_day_limit                    15 non-null     float64\n",
      " 14  adjusted_14_day_limit                 15 non-null     float64\n",
      " 15  final_14_day_limit_rwf                15 non-null     float64\n",
      " 16  final_14_day_limit_usd                15 non-null     float64\n",
      " 17  scoring_refresh_date                  15 non-null     object \n",
      " 18  model_version                         15 non-null     object \n",
      " 19  previous_limit                        28 non-null     float64\n",
      " 20  new_final_limit                       15 non-null     float64\n",
      " 21  is_qualified                          29 non-null     bool   \n",
      " 22  rules_summary_narration               29 non-null     object \n",
      " 23  limit_reason                          29 non-null     object \n",
      "dtypes: bool(1), float64(13), int64(1), object(9)\n",
      "memory usage: 5.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ba87f2d-6ad0-4993-9936-73e9cfa5a2a2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ef18b2a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Limits assigned less than product thresholds    20\n",
       "Name: rules_summary_narration, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['is_qualified'] == False]['rules_summary_narration'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6c1f36d1-ef54-41fe-81ad-eddb1adb7909",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "788351563      2\n",
       "788463450      1\n",
       "107905852      1\n",
       "106772260      1\n",
       "78835156302    1\n",
       "78835156301    1\n",
       "7884832250     1\n",
       "789401757      1\n",
       "788851050      1\n",
       "788827066      1\n",
       "788815064      1\n",
       "788741292      1\n",
       "788629671      1\n",
       "788601982      1\n",
       "788563675      1\n",
       "101486430      1\n",
       "102500107      1\n",
       "788284295      1\n",
       "786210588      1\n",
       "785668447      1\n",
       "785609806      1\n",
       "785426205      1\n",
       "785295432      1\n",
       "783241911      1\n",
       "783059997      1\n",
       "783044801      1\n",
       "111454166      1\n",
       "108361129      1\n",
       "103383876      1\n",
       "102505180      1\n",
       "788310260      1\n",
       "Name: customer_id, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['customer_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "66eb70fc-02ef-4c18-ab13-b17fb30935fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def zeroize_non_qualified_limits(df):\n",
    "    final_14_day_limit_rwf = df['final_14_day_limit_rwf']\n",
    "    is_qualified = df['is_qualified']\n",
    "    \n",
    "    if is_qualified == False:\n",
    "        final_14_day_limit_rwf = 0\n",
    "        return final_14_day_limit_rwf\n",
    "    else: \n",
    "        return final_14_day_limit_rwf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e4a5cfb6-bad9-4d28-bb92-4938440424b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def zeroize_usd_non_qualified_limits(df):\n",
    "    final_14_day_limit_usd = df['final_14_day_limit_usd']\n",
    "    is_qualified = df['is_qualified']\n",
    "    \n",
    "    if is_qualified == False:\n",
    "        final_14_day_limit_usd = 0\n",
    "        return final_14_day_limit_usd\n",
    "    else: \n",
    "        return final_14_day_limit_usd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2405091a-dbd2-4d4a-a37f-4c6f5f3d5eef",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7a1eb1c6-a7db-4a42-bd99-b6539d69d72e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>previous_limit</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>rules_summary_narration</th>\n",
       "      <th>limit_reason</th>\n",
       "      <th>(final_14_day_limit_rwf, final_14_day_limit_usd)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>2023-03-16</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>2023-03-16</td>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>39797000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2321500.0</td>\n",
       "      <td>2275.980392</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>True</td>\n",
       "      <td>All rules passed(limit maintained)</td>\n",
       "      <td>F001</td>\n",
       "      <td>(2321500.0, 2275.9803921568628)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>2023-04-30</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Peter</td>\n",
       "      <td>2023-04-30</td>\n",
       "      <td>2022-12-06</td>\n",
       "      <td>33130349.2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1932700.0</td>\n",
       "      <td>1894.803922</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>1696725.0</td>\n",
       "      <td>1696725.0</td>\n",
       "      <td>True</td>\n",
       "      <td>All rules passed(limit maintained)</td>\n",
       "      <td>F001</td>\n",
       "      <td>(1932700.0, 1894.8039215686276)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "0    101486430          2020-10-11             2023-03-16   \n",
       "1    102500107          2020-01-04             2023-04-30   \n",
       "\n",
       "   age_on_network_months              vendors  \\\n",
       "0                   30.0  Selemani Nyamirambo   \n",
       "1                   40.0                Peter   \n",
       "\n",
       "  most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "0                           2023-03-16                        2022-12-01   \n",
       "1                           2023-04-30                        2022-12-06   \n",
       "\n",
       "   total_value_last_6_months  trading_span_past_6_months  unique_sales_months  \\\n",
       "0                 39797000.0                         4.0                  4.0   \n",
       "1                 33130349.2                         5.0                  5.0   \n",
       "\n",
       "   ...  final_14_day_limit_rwf  final_14_day_limit_usd  scoring_refresh_date  \\\n",
       "0  ...               2321500.0             2275.980392            2023-07-05   \n",
       "1  ...               1932700.0             1894.803922            2023-07-05   \n",
       "\n",
       "                      model_version  previous_limit  new_final_limit  \\\n",
       "0  2023-001[2023-02-16, 2023-07-05]       2757600.0        2757600.0   \n",
       "1  2023-001[2023-02-16, 2023-07-05]       1696725.0        1696725.0   \n",
       "\n",
       "   is_qualified             rules_summary_narration limit_reason  \\\n",
       "0          True  All rules passed(limit maintained)         F001   \n",
       "1          True  All rules passed(limit maintained)         F001   \n",
       "\n",
       "   (final_14_day_limit_rwf, final_14_day_limit_usd)  \n",
       "0                   (2321500.0, 2275.9803921568628)  \n",
       "1                   (1932700.0, 1894.8039215686276)  \n",
       "\n",
       "[2 rows x 25 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['final_14_day_limit_rwf'] = df.apply(lambda x : zeroize_non_qualified_limits(x), axis = 1)\n",
    "\n",
    "df['final_14_day_limit_usd'] = df.apply(lambda x : zeroize_usd_non_qualified_limits(x), axis = 1)\n",
    "\n",
    "\n",
    "\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "99f95184-f0da-44e3-9e85-4cf18f2a9fdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>previous_limit</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>rules_summary_narration</th>\n",
       "      <th>limit_reason</th>\n",
       "      <th>(final_14_day_limit_rwf, final_14_day_limit_usd)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102505180</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2023-04-12</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Xavier</td>\n",
       "      <td>2023-04-12</td>\n",
       "      <td>2023-01-01</td>\n",
       "      <td>6077425.42</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>490500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108361129</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2022-12-23</td>\n",
       "      <td>36.0</td>\n",
       "      <td>Damascene</td>\n",
       "      <td>2022-12-23</td>\n",
       "      <td>2022-12-23</td>\n",
       "      <td>127576.27</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>111454166</td>\n",
       "      <td>2020-12-19</td>\n",
       "      <td>2023-02-04</td>\n",
       "      <td>26.0</td>\n",
       "      <td>Mutsinzi Mugihogere</td>\n",
       "      <td>2023-02-04</td>\n",
       "      <td>2023-02-04</td>\n",
       "      <td>103261.02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>783044801</td>\n",
       "      <td>2022-09-23</td>\n",
       "      <td>2023-03-03</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Gentille</td>\n",
       "      <td>2023-03-03</td>\n",
       "      <td>2022-12-02</td>\n",
       "      <td>4193074.57</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>783059997</td>\n",
       "      <td>2022-09-24</td>\n",
       "      <td>2023-04-23</td>\n",
       "      <td>7.0</td>\n",
       "      <td>clementine</td>\n",
       "      <td>2023-04-23</td>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>4563101.71</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>785295432</td>\n",
       "      <td>2022-07-14</td>\n",
       "      <td>2022-12-23</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Flora</td>\n",
       "      <td>2022-12-23</td>\n",
       "      <td>2022-12-09</td>\n",
       "      <td>901152.54</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>785426205</td>\n",
       "      <td>2022-11-10</td>\n",
       "      <td>2023-04-03</td>\n",
       "      <td>5.0</td>\n",
       "      <td>PLACIDE</td>\n",
       "      <td>2023-04-03</td>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>5119669.49</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>785668447</td>\n",
       "      <td>2022-11-04</td>\n",
       "      <td>2023-04-26</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Raphael Kanombe</td>\n",
       "      <td>2023-04-26</td>\n",
       "      <td>2022-12-04</td>\n",
       "      <td>8381986.37</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>843500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>788284295</td>\n",
       "      <td>2022-05-08</td>\n",
       "      <td>2023-01-03</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Chantal Nyamirambo</td>\n",
       "      <td>2023-01-03</td>\n",
       "      <td>2023-01-03</td>\n",
       "      <td>1009661.02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>788463450</td>\n",
       "      <td>2022-09-18</td>\n",
       "      <td>2023-04-23</td>\n",
       "      <td>8.0</td>\n",
       "      <td>David Birembo</td>\n",
       "      <td>2023-04-23</td>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>4311955.94</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>325100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>788563675</td>\n",
       "      <td>2022-10-12</td>\n",
       "      <td>2023-03-02</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Dative Batsinda</td>\n",
       "      <td>2023-03-02</td>\n",
       "      <td>2023-03-02</td>\n",
       "      <td>2501855.93</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>788629671</td>\n",
       "      <td>2022-10-04</td>\n",
       "      <td>2022-12-24</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Oliva Nyanza</td>\n",
       "      <td>2022-12-24</td>\n",
       "      <td>2022-12-08</td>\n",
       "      <td>5734788.14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Based on historical and current information on...</td>\n",
       "      <td>C004</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>788741292</td>\n",
       "      <td>2022-06-11</td>\n",
       "      <td>2023-04-28</td>\n",
       "      <td>11.0</td>\n",
       "      <td>MICHELLE</td>\n",
       "      <td>2023-04-28</td>\n",
       "      <td>2022-12-14</td>\n",
       "      <td>8575593.22</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>534000.0</td>\n",
       "      <td>534000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Based on historical and current information on...</td>\n",
       "      <td>C004</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>788815064</td>\n",
       "      <td>2022-09-19</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Augustin</td>\n",
       "      <td>2023-04-05</td>\n",
       "      <td>2022-12-19</td>\n",
       "      <td>8303474.57</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>769900.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>788851050</td>\n",
       "      <td>2022-10-09</td>\n",
       "      <td>2023-01-23</td>\n",
       "      <td>4.0</td>\n",
       "      <td>J.M.V. NYABUGO</td>\n",
       "      <td>2023-01-23</td>\n",
       "      <td>2022-12-25</td>\n",
       "      <td>4011525.41</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>819800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>789401757</td>\n",
       "      <td>2022-05-10</td>\n",
       "      <td>2023-03-11</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Diane Kacyiru</td>\n",
       "      <td>2023-03-11</td>\n",
       "      <td>2022-12-09</td>\n",
       "      <td>5050940.69</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>837300.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>106772260</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1515700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>107905852</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>788351563</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>515600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>788351563</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1987400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>Limits assigned less than product thresholds</td>\n",
       "      <td>D001</td>\n",
       "      <td>(0, 0)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "2     102505180          2020-01-02             2023-04-12   \n",
       "4     108361129          2020-01-02             2022-12-23   \n",
       "5     111454166          2020-12-19             2023-02-04   \n",
       "6     783044801          2022-09-23             2023-03-03   \n",
       "7     783059997          2022-09-24             2023-04-23   \n",
       "9     785295432          2022-07-14             2022-12-23   \n",
       "10    785426205          2022-11-10             2023-04-03   \n",
       "12    785668447          2022-11-04             2023-04-26   \n",
       "14    788284295          2022-05-08             2023-01-03   \n",
       "16    788463450          2022-09-18             2023-04-23   \n",
       "17    788563675          2022-10-12             2023-03-02   \n",
       "19    788629671          2022-10-04             2022-12-24   \n",
       "20    788741292          2022-06-11             2023-04-28   \n",
       "21    788815064          2022-09-19             2023-04-05   \n",
       "23    788851050          2022-10-09             2023-01-23   \n",
       "24    789401757          2022-05-10             2023-03-11   \n",
       "28    106772260                 NaN                    NaN   \n",
       "29    107905852                 NaN                    NaN   \n",
       "30    788351563                 NaN                    NaN   \n",
       "31    788351563                 NaN                    NaN   \n",
       "\n",
       "    age_on_network_months              vendors  \\\n",
       "2                    40.0               Xavier   \n",
       "4                    36.0            Damascene   \n",
       "5                    26.0  Mutsinzi Mugihogere   \n",
       "6                     6.0             Gentille   \n",
       "7                     7.0           clementine   \n",
       "9                     6.0                Flora   \n",
       "10                    5.0              PLACIDE   \n",
       "12                    6.0      Raphael Kanombe   \n",
       "14                    8.0   Chantal Nyamirambo   \n",
       "16                    8.0        David Birembo   \n",
       "17                    5.0      Dative Batsinda   \n",
       "19                    3.0         Oliva Nyanza   \n",
       "20                   11.0             MICHELLE   \n",
       "21                    7.0             Augustin   \n",
       "23                    4.0       J.M.V. NYABUGO   \n",
       "24                   11.0        Diane Kacyiru   \n",
       "28                    NaN                  NaN   \n",
       "29                    NaN                  NaN   \n",
       "30                    NaN                  NaN   \n",
       "31                    NaN                  NaN   \n",
       "\n",
       "   most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "2                            2023-04-12                        2023-01-01   \n",
       "4                            2022-12-23                        2022-12-23   \n",
       "5                            2023-02-04                        2023-02-04   \n",
       "6                            2023-03-03                        2022-12-02   \n",
       "7                            2023-04-23                        2022-12-01   \n",
       "9                            2022-12-23                        2022-12-09   \n",
       "10                           2023-04-03                        2022-12-01   \n",
       "12                           2023-04-26                        2022-12-04   \n",
       "14                           2023-01-03                        2023-01-03   \n",
       "16                           2023-04-23                        2022-12-01   \n",
       "17                           2023-03-02                        2023-03-02   \n",
       "19                           2022-12-24                        2022-12-08   \n",
       "20                           2023-04-28                        2022-12-14   \n",
       "21                           2023-04-05                        2022-12-19   \n",
       "23                           2023-01-23                        2022-12-25   \n",
       "24                           2023-03-11                        2022-12-09   \n",
       "28                                  NaN                               NaN   \n",
       "29                                  NaN                               NaN   \n",
       "30                                  NaN                               NaN   \n",
       "31                                  NaN                               NaN   \n",
       "\n",
       "    total_value_last_6_months  trading_span_past_6_months  \\\n",
       "2                  6077425.42                         4.0   \n",
       "4                   127576.27                         1.0   \n",
       "5                   103261.02                         1.0   \n",
       "6                  4193074.57                         4.0   \n",
       "7                  4563101.71                         5.0   \n",
       "9                   901152.54                         1.0   \n",
       "10                 5119669.49                         5.0   \n",
       "12                 8381986.37                         5.0   \n",
       "14                 1009661.02                         1.0   \n",
       "16                 4311955.94                         5.0   \n",
       "17                 2501855.93                         1.0   \n",
       "19                 5734788.14                         1.0   \n",
       "20                 8575593.22                         5.0   \n",
       "21                 8303474.57                         5.0   \n",
       "23                 4011525.41                         2.0   \n",
       "24                 5050940.69                         4.0   \n",
       "28                        NaN                         NaN   \n",
       "29                        NaN                         NaN   \n",
       "30                        NaN                         NaN   \n",
       "31                        NaN                         NaN   \n",
       "\n",
       "    unique_sales_months  ...  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "2                   3.0  ...                     0.0                     0.0   \n",
       "4                   1.0  ...                     0.0                     0.0   \n",
       "5                   1.0  ...                     0.0                     0.0   \n",
       "6                   2.0  ...                     0.0                     0.0   \n",
       "7                   3.0  ...                     0.0                     0.0   \n",
       "9                   1.0  ...                     0.0                     0.0   \n",
       "10                  3.0  ...                     0.0                     0.0   \n",
       "12                  3.0  ...                     0.0                     0.0   \n",
       "14                  1.0  ...                     0.0                     0.0   \n",
       "16                  3.0  ...                     0.0                     0.0   \n",
       "17                  1.0  ...                     0.0                     0.0   \n",
       "19                  1.0  ...                     0.0                     0.0   \n",
       "20                  3.0  ...                     0.0                     0.0   \n",
       "21                  3.0  ...                     0.0                     0.0   \n",
       "23                  2.0  ...                     0.0                     0.0   \n",
       "24                  2.0  ...                     0.0                     0.0   \n",
       "28                  NaN  ...                     0.0                     0.0   \n",
       "29                  NaN  ...                     0.0                     0.0   \n",
       "30                  NaN  ...                     0.0                     0.0   \n",
       "31                  NaN  ...                     0.0                     0.0   \n",
       "\n",
       "    scoring_refresh_date                     model_version  previous_limit  \\\n",
       "2             2023-07-05  2023-001[2023-02-16, 2023-07-05]        490500.0   \n",
       "4             2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "5             2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "6             2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "7             2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "9             2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "10            2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "12            2023-07-05  2023-001[2023-02-16, 2023-07-05]        843500.0   \n",
       "14            2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "16            2023-07-05  2023-001[2023-02-16, 2023-07-05]        325100.0   \n",
       "17            2023-07-05  2023-001[2023-02-16, 2023-07-05]             0.0   \n",
       "19            2023-07-05  2023-001[2023-02-16, 2023-07-05]        900000.0   \n",
       "20            2023-07-05  2023-001[2023-02-16, 2023-07-05]        534000.0   \n",
       "21            2023-07-05  2023-001[2023-02-16, 2023-07-05]        769900.0   \n",
       "23            2023-07-05  2023-001[2023-02-16, 2023-07-05]        819800.0   \n",
       "24            2023-07-05  2023-001[2023-02-16, 2023-07-05]        837300.0   \n",
       "28                   NaN                               NaN       1515700.0   \n",
       "29                   NaN                               NaN             0.0   \n",
       "30                   NaN                               NaN        515600.0   \n",
       "31                   NaN                               NaN       1987400.0   \n",
       "\n",
       "    new_final_limit  is_qualified  \\\n",
       "2               0.0         False   \n",
       "4               0.0         False   \n",
       "5               0.0         False   \n",
       "6               0.0         False   \n",
       "7               0.0         False   \n",
       "9               0.0         False   \n",
       "10              0.0         False   \n",
       "12              0.0         False   \n",
       "14              0.0         False   \n",
       "16              0.0         False   \n",
       "17              0.0         False   \n",
       "19         900000.0         False   \n",
       "20         534000.0         False   \n",
       "21              0.0         False   \n",
       "23              0.0         False   \n",
       "24              0.0         False   \n",
       "28              NaN         False   \n",
       "29              NaN         False   \n",
       "30              NaN         False   \n",
       "31              NaN         False   \n",
       "\n",
       "                              rules_summary_narration limit_reason  \\\n",
       "2        Limits assigned less than product thresholds         D001   \n",
       "4        Limits assigned less than product thresholds         D001   \n",
       "5        Limits assigned less than product thresholds         D001   \n",
       "6        Limits assigned less than product thresholds         D001   \n",
       "7        Limits assigned less than product thresholds         D001   \n",
       "9        Limits assigned less than product thresholds         D001   \n",
       "10       Limits assigned less than product thresholds         D001   \n",
       "12       Limits assigned less than product thresholds         D001   \n",
       "14       Limits assigned less than product thresholds         D001   \n",
       "16       Limits assigned less than product thresholds         D001   \n",
       "17       Limits assigned less than product thresholds         D001   \n",
       "19  Based on historical and current information on...         C004   \n",
       "20  Based on historical and current information on...         C004   \n",
       "21       Limits assigned less than product thresholds         D001   \n",
       "23       Limits assigned less than product thresholds         D001   \n",
       "24       Limits assigned less than product thresholds         D001   \n",
       "28       Limits assigned less than product thresholds         D001   \n",
       "29       Limits assigned less than product thresholds         D001   \n",
       "30       Limits assigned less than product thresholds         D001   \n",
       "31       Limits assigned less than product thresholds         D001   \n",
       "\n",
       "    (final_14_day_limit_rwf, final_14_day_limit_usd)  \n",
       "2                                             (0, 0)  \n",
       "4                                             (0, 0)  \n",
       "5                                             (0, 0)  \n",
       "6                                             (0, 0)  \n",
       "7                                             (0, 0)  \n",
       "9                                             (0, 0)  \n",
       "10                                            (0, 0)  \n",
       "12                                            (0, 0)  \n",
       "14                                            (0, 0)  \n",
       "16                                            (0, 0)  \n",
       "17                                            (0, 0)  \n",
       "19                                            (0, 0)  \n",
       "20                                            (0, 0)  \n",
       "21                                            (0, 0)  \n",
       "23                                            (0, 0)  \n",
       "24                                            (0, 0)  \n",
       "28                                            (0, 0)  \n",
       "29                                            (0, 0)  \n",
       "30                                            (0, 0)  \n",
       "31                                            (0, 0)  \n",
       "\n",
       "[20 rows x 25 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['is_qualified'] == False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8cacc89-4104-4866-a6b4-4223d0ef6d1f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8e1e58d-bd3a-4558-98ad-fff4277b37e4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2301652a-3bb1-44a6-8b74-95d97984b330",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rules_summary_narration(df):\n",
    "    age_on_network = df['age_on_network_months']\n",
    "    trading_consistency = df['trading_consistency_last_6_months']\n",
    "    months_since_last_transaction = df['diff_last_txn_months']\n",
    "    allocated_14_day_limit = df['final_14_day_limit_rwf']\n",
    "    new_final_14_day_limit = df['new_final_limit']\n",
    "    previous_limit = df['previous_limit']\n",
    "    is_qualified = df['is_qualified']\n",
    "    total_value_last_6_months = df['total_value_last_6_months']\n",
    "    \n",
    "    if allocated_14_day_limit == 0 and total_value_last_6_months == 0 and is_qualified == False:\n",
    "        return 'No trading activity: B003'\n",
    "    elif new_final_14_day_limit == 0 and allocated_14_day_limit < new_final_14_day_limit and is_qualified == False:\n",
    "        return 'Inconsistent trading activity: B002'\n",
    "    elif new_final_14_day_limit > 0 and is_qualified == False:\n",
    "        return 'Based on historical and current information on your business and loan history, you do not currently meet Asante lending criteria: C004'\n",
    "    elif new_final_14_day_limit > 0 and new_final_14_day_limit == previous_limit and is_qualified == True:\n",
    "        return 'All rules passed(limit maintained): F001'\n",
    "    elif new_final_14_day_limit > 0 and previous_limit == 0 and is_qualified == True:\n",
    "        return 'All rules passed (New above 0 limit): F001'\n",
    "    elif new_final_14_day_limit > 0 and new_final_14_day_limit < allocated_14_day_limit and is_qualified == True:\n",
    "        return 'All rules passed but lower than expected trading activity(limit decreased): B001'\n",
    "    elif new_final_14_day_limit > 0 and new_final_14_day_limit > allocated_14_day_limit and is_qualified == True:\n",
    "        return 'All rules passed(limit increased): F001'\n",
    "    else:\n",
    "        return 'Limits assigned less than product thresholds: D001'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9644b6bc-2e50-4329-be8a-6d461dc7d4e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6752c16c-4636-4c4d-8664-6e6166e321ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>previous_limit</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>rules_summary_narration</th>\n",
       "      <th>limit_reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>2023-03-16</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>2023-03-16</td>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>39797000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2321500.0</td>\n",
       "      <td>2321500.0</td>\n",
       "      <td>2275.980392</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>True</td>\n",
       "      <td>All rules passed(limit maintained)</td>\n",
       "      <td>F001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>2023-04-30</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Peter</td>\n",
       "      <td>2023-04-30</td>\n",
       "      <td>2022-12-06</td>\n",
       "      <td>33130349.2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1932700.0</td>\n",
       "      <td>1932700.0</td>\n",
       "      <td>1894.803922</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>1696725.0</td>\n",
       "      <td>1696725.0</td>\n",
       "      <td>True</td>\n",
       "      <td>All rules passed(limit maintained)</td>\n",
       "      <td>F001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "0    101486430          2020-10-11             2023-03-16   \n",
       "1    102500107          2020-01-04             2023-04-30   \n",
       "\n",
       "   age_on_network_months              vendors  \\\n",
       "0                   30.0  Selemani Nyamirambo   \n",
       "1                   40.0                Peter   \n",
       "\n",
       "  most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "0                           2023-03-16                        2022-12-01   \n",
       "1                           2023-04-30                        2022-12-06   \n",
       "\n",
       "   total_value_last_6_months  trading_span_past_6_months  unique_sales_months  \\\n",
       "0                 39797000.0                         4.0                  4.0   \n",
       "1                 33130349.2                         5.0                  5.0   \n",
       "\n",
       "   ...  adjusted_14_day_limit  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "0  ...              2321500.0               2321500.0             2275.980392   \n",
       "1  ...              1932700.0               1932700.0             1894.803922   \n",
       "\n",
       "   scoring_refresh_date                     model_version  previous_limit  \\\n",
       "0            2023-07-05  2023-001[2023-02-16, 2023-07-05]       2757600.0   \n",
       "1            2023-07-05  2023-001[2023-02-16, 2023-07-05]       1696725.0   \n",
       "\n",
       "   new_final_limit is_qualified             rules_summary_narration  \\\n",
       "0        2757600.0         True  All rules passed(limit maintained)   \n",
       "1        1696725.0         True  All rules passed(limit maintained)   \n",
       "\n",
       "   limit_reason  \n",
       "0          F001  \n",
       "1          F001  \n",
       "\n",
       "[2 rows x 24 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rules_summary_narration'] = df.apply(lambda x: rules_summary_narration(x), axis = 1)\n",
    "    \n",
    "df[['rules_summary_narration','limit_reason']] = df[\"rules_summary_narration\"].astype(\"str\").str.split(\":\", expand = True)\n",
    "\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "460d914f-d6ab-4256-9bac-2b1f41da692e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Limits assigned less than product thresholds                                                                                         20\n",
       "All rules passed(limit maintained)                                                                                                   10\n",
       "Based on historical and current information on your business and loan history, you do not currently meet Asante lending criteria      2\n",
       "Name: rules_summary_narration, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rules_summary_narration'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c88c798a-a7f2-42e8-a9aa-eef78a55c706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32, 24)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "91177f0b-4f6b-4b10-8984-36cbe8dd4981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>previous_limit</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>rules_summary_narration</th>\n",
       "      <th>limit_reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>788629671</td>\n",
       "      <td>2022-10-04</td>\n",
       "      <td>2022-12-24</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Oliva Nyanza</td>\n",
       "      <td>2022-12-24</td>\n",
       "      <td>2022-12-08</td>\n",
       "      <td>5734788.14</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>334600.0</td>\n",
       "      <td>334600.0</td>\n",
       "      <td>328.039216</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>900000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Based on historical and current information on...</td>\n",
       "      <td>C004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>788741292</td>\n",
       "      <td>2022-06-11</td>\n",
       "      <td>2023-04-28</td>\n",
       "      <td>11.0</td>\n",
       "      <td>MICHELLE</td>\n",
       "      <td>2023-04-28</td>\n",
       "      <td>2022-12-14</td>\n",
       "      <td>8575593.22</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>300200.0</td>\n",
       "      <td>300200.0</td>\n",
       "      <td>294.313725</td>\n",
       "      <td>2023-07-05</td>\n",
       "      <td>2023-001[2023-02-16, 2023-07-05]</td>\n",
       "      <td>534000.0</td>\n",
       "      <td>534000.0</td>\n",
       "      <td>False</td>\n",
       "      <td>Based on historical and current information on...</td>\n",
       "      <td>C004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "19    788629671          2022-10-04             2022-12-24   \n",
       "20    788741292          2022-06-11             2023-04-28   \n",
       "\n",
       "    age_on_network_months       vendors most_recent_sales_date_last_6_months  \\\n",
       "19                    3.0  Oliva Nyanza                           2022-12-24   \n",
       "20                   11.0      MICHELLE                           2023-04-28   \n",
       "\n",
       "   earliest_sales_date_last_6_months  total_value_last_6_months  \\\n",
       "19                        2022-12-08                 5734788.14   \n",
       "20                        2022-12-14                 8575593.22   \n",
       "\n",
       "    trading_span_past_6_months  unique_sales_months  ...  \\\n",
       "19                         1.0                  1.0  ...   \n",
       "20                         5.0                  3.0  ...   \n",
       "\n",
       "    adjusted_14_day_limit  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "19               334600.0                334600.0              328.039216   \n",
       "20               300200.0                300200.0              294.313725   \n",
       "\n",
       "    scoring_refresh_date                     model_version  previous_limit  \\\n",
       "19            2023-07-05  2023-001[2023-02-16, 2023-07-05]        900000.0   \n",
       "20            2023-07-05  2023-001[2023-02-16, 2023-07-05]        534000.0   \n",
       "\n",
       "    new_final_limit is_qualified  \\\n",
       "19         900000.0        False   \n",
       "20         534000.0        False   \n",
       "\n",
       "                              rules_summary_narration  limit_reason  \n",
       "19  Based on historical and current information on...          C004  \n",
       "20  Based on historical and current information on...          C004  \n",
       "\n",
       "[2 rows x 24 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['rules_summary_narration'] == 'Based on historical and current information on your business and loan history, you do not currently meet Asante lending criteria ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb690457-63f5-495f-b60c-23f0be2a9808",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "eed46f97",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[['customer_id','new_final_limit']].to_excel('Analysis_35.xlsx', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31738800",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4964a368",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc0a8e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b0312db",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e1d07b6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "21604ba3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import psycopg2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "9fddd58d",
   "metadata": {},
   "outputs": [],
   "source": [
    "host = '157.245.248.249'\n",
    "port = '5432'\n",
    "dbname = 'ubuntu'\n",
    "user = 'fionamurugi'\n",
    "password = '?xM9C<rJ'\n",
    "\n",
    "\n",
    "def load_previous_scoring_results():\n",
    "    \n",
    "    with psycopg2.connect(host = host,\n",
    "                          port = port,\n",
    "                          database = dbname,\n",
    "                          user = user,\n",
    "                          password = password) as conn:\n",
    "            sql = f\"SELECT * from stockpoint.scoring_results_srds_view\"  \n",
    "            \n",
    "            df = pd.read_sql(sql, conn)\n",
    "            \n",
    "    print('Fetched data')\n",
    "        \n",
    "    conn.close()\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "be5451ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2436733/3394024039.py:17: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df = pd.read_sql(sql, conn)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetched data\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>proxy_customer_id</th>\n",
       "      <th>vendors</th>\n",
       "      <th>original_customer_id</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>created_at</th>\n",
       "      <th>rnk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>180</td>\n",
       "      <td>101486430</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>101486430</td>\n",
       "      <td>1802</td>\n",
       "      <td>1838400</td>\n",
       "      <td>2023-02-15</td>\n",
       "      <td>2023-02-15 08:59:52.173027</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>179</td>\n",
       "      <td>102500107</td>\n",
       "      <td>Peter</td>\n",
       "      <td>102500107</td>\n",
       "      <td>739</td>\n",
       "      <td>754100</td>\n",
       "      <td>2023-02-15</td>\n",
       "      <td>2023-02-15 08:59:52.173027</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    id proxy_customer_id              vendors original_customer_id  \\\n",
       "0  180         101486430  Selemani Nyamirambo            101486430   \n",
       "1  179         102500107                Peter            102500107   \n",
       "\n",
       "   final_14_day_limit_usd  final_14_day_limit_rwf scoring_refresh_date  \\\n",
       "0                    1802                 1838400           2023-02-15   \n",
       "1                     739                  754100           2023-02-15   \n",
       "\n",
       "                  created_at  rnk  \n",
       "0 2023-02-15 08:59:52.173027    1  \n",
       "1 2023-02-15 08:59:52.173027    1  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check = load_previous_scoring_results()\n",
    "\n",
    "check.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "71a418a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>average_monthly_value_last_6_months</th>\n",
       "      <th>gross_14_day_limit</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>new_final_limit_x</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>new_final_limit_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102505180</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Xavier</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>2022-09-25</td>\n",
       "      <td>14434069.47</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2405678.245</td>\n",
       "      <td>673589.9086</td>\n",
       "      <td>673600.0</td>\n",
       "      <td>673600.0</td>\n",
       "      <td>660.392157</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>490500.0</td>\n",
       "      <td>True</td>\n",
       "      <td>490500.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "2   102505180          2020-01-02             2023-02-01   \n",
       "\n",
       "   age_on_network_months vendors most_recent_sales_date_last_6_months  \\\n",
       "2                   37.0  Xavier                           2023-02-01   \n",
       "\n",
       "  earliest_sales_date_last_6_months  total_value_last_6_months  \\\n",
       "2                        2022-09-25                14434069.47   \n",
       "\n",
       "   trading_span_past_6_months  unique_sales_months  ...  \\\n",
       "2                         6.0                  5.0  ...   \n",
       "\n",
       "   average_monthly_value_last_6_months  gross_14_day_limit  \\\n",
       "2                          2405678.245         673589.9086   \n",
       "\n",
       "   adjusted_14_day_limit  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "2               673600.0                673600.0              660.392157   \n",
       "\n",
       "   scoring_refresh_date                     model_version new_final_limit_x  \\\n",
       "2            2023-03-15  2023-001[2023-02-16, 2023-03-15]          490500.0   \n",
       "\n",
       "  is_qualified  new_final_limit_y  \n",
       "2         True           490500.0  \n",
       "\n",
       "[1 rows x 22 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_limits_df[current_limits_df['customer_id'] == '102505180']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "bf3e8f30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "564075.0"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "490500.0 * 1.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f3f1cbb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8c96e265",
   "metadata": {},
   "outputs": [],
   "source": [
    "def limit_stabilization(df):\n",
    "    \n",
    "    current_limit = df['current_limit']\n",
    "    previous_limit = df['previous_limit']\n",
    "    \n",
    "    if current_limit == 0:\n",
    "        return current_limit\n",
    "    \n",
    "    elif previous_limit == 0:\n",
    "        return current_limit\n",
    "\n",
    "    elif current_limit >= (previous_limit * 1.5):\n",
    "        return previous_limit * 1.5\n",
    "    \n",
    "#     elif current_limit >= (previous_limit * 0.85) or current_limit <= (previous_limit * 1.15):\n",
    "#         return previous_limit\n",
    "\n",
    "    else:\n",
    "        return current_limit\n",
    "    \n",
    "def limit_stabilization_application(current_limits_df):\n",
    "    \n",
    "    ## read in previous results and clean df\n",
    "    \n",
    "    \n",
    "   \n",
    "    previous_scoring_results_df = load_previous_scoring_results()\n",
    "    \n",
    "    previous_results = previous_scoring_results_df[['proxy_customer_id','final_14_day_limit_rwf']]\n",
    "\n",
    "    previous_results.rename(columns = {'proxy_customer_id' : 'customer_id',\n",
    "                                      'final_14_day_limit_rwf' : 'previous_limit'}, inplace = True)\n",
    "    \n",
    "    previous_results['customer_id'] = previous_results['customer_id'].astype(str)\n",
    "          \n",
    "     ## clean current limits df \n",
    "    current_results = current_limits_df[['customer_id','final_14_day_limit_rwf']]\n",
    "\n",
    "    current_results.rename(columns = {'final_14_day_limit_rwf' : 'current_limit'}, inplace = True)\n",
    "    \n",
    "    current_results['customer_id'] = current_results['customer_id'].astype(str)\n",
    "    \n",
    "    current_limits_df['customer_id'] = current_limits_df['customer_id'].astype(str)\n",
    "    \n",
    "    \n",
    "    \n",
    "    ## merge the dataframes\n",
    "    \n",
    "    stabilized_limits_df = pd.merge(previous_results, current_results, on = 'customer_id', how = 'outer')\n",
    "    \n",
    "    \n",
    "    stabilized_limits_df['new_final_limit'] = stabilized_limits_df.apply(lambda x: limit_stabilization(x), axis = 1)\n",
    "    \n",
    "    stabilized_limits_df = stabilized_limits_df[['customer_id','new_final_limit']]\n",
    "\n",
    "    return stabilized_limits_df\n",
    "    \n",
    "#     current_limits_df = pd.merge(current_limits_df, stabilized_limits_df, on = 'customer_id', how = 'outer')\n",
    "    \n",
    "#     return current_limits_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "62f1523b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2436733/3394024039.py:17: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df = pd.read_sql(sql, conn)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetched data\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2436733/3967589059.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  previous_results.rename(columns = {'proxy_customer_id' : 'customer_id',\n",
      "/tmp/ipykernel_2436733/3967589059.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  previous_results['customer_id'] = previous_results['customer_id'].astype(str)\n",
      "/tmp/ipykernel_2436733/3967589059.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  current_results.rename(columns = {'final_14_day_limit_rwf' : 'current_limit'}, inplace = True)\n",
      "/tmp/ipykernel_2436733/3967589059.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  current_results['customer_id'] = current_results['customer_id'].astype(str)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>new_final_limit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2757600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>1131150.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id  new_final_limit\n",
       "0   101486430        2757600.0\n",
       "1   102500107        1131150.0"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = limit_stabilization_application(df)\n",
    "\n",
    "final.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e9035879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>new_final_limit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2757600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>1131150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102505180</td>\n",
       "      <td>673600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>103383876</td>\n",
       "      <td>1387050.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108361129</td>\n",
       "      <td>597400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>783241911</td>\n",
       "      <td>1160600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>785609806</td>\n",
       "      <td>2798800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>786210588</td>\n",
       "      <td>1433700.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>78835156301</td>\n",
       "      <td>633450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>78835156302</td>\n",
       "      <td>1176150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7884832250</td>\n",
       "      <td>2687400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>788741292</td>\n",
       "      <td>534000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>788827066</td>\n",
       "      <td>2746050.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>789401757</td>\n",
       "      <td>837300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>106772260</td>\n",
       "      <td>520100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>107905852</td>\n",
       "      <td>583200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>111454166</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>783044801</td>\n",
       "      <td>783700.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>783059997</td>\n",
       "      <td>416800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>785295432</td>\n",
       "      <td>374400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>785426205</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>785668447</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>788284295</td>\n",
       "      <td>328400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>788310260</td>\n",
       "      <td>1132800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>788463450</td>\n",
       "      <td>473800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>788563675</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>788601982</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>788629671</td>\n",
       "      <td>900000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>788640932</td>\n",
       "      <td>351900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>788815064</td>\n",
       "      <td>769900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>788851050</td>\n",
       "      <td>819800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>788351563</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>788351563</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id  new_final_limit\n",
       "0     101486430        2757600.0\n",
       "1     102500107        1131150.0\n",
       "2     102505180         673600.0\n",
       "3     103383876        1387050.0\n",
       "4     108361129         597400.0\n",
       "5     783241911        1160600.0\n",
       "6     785609806        2798800.0\n",
       "7     786210588        1433700.0\n",
       "8   78835156301         633450.0\n",
       "9   78835156302        1176150.0\n",
       "10   7884832250        2687400.0\n",
       "11    788741292         534000.0\n",
       "12    788827066        2746050.0\n",
       "13    789401757         837300.0\n",
       "14    106772260         520100.0\n",
       "15    107905852         583200.0\n",
       "16    111454166              0.0\n",
       "17    783044801         783700.0\n",
       "18    783059997         416800.0\n",
       "19    785295432         374400.0\n",
       "20    785426205              0.0\n",
       "21    785668447              0.0\n",
       "22    788284295         328400.0\n",
       "23    788310260        1132800.0\n",
       "24    788463450         473800.0\n",
       "25    788563675              0.0\n",
       "26    788601982              0.0\n",
       "27    788629671         900000.0\n",
       "28    788640932         351900.0\n",
       "29    788815064         769900.0\n",
       "30    788851050         819800.0\n",
       "31    788351563              NaN\n",
       "32    788351563              NaN"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "a81247a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>diff_last_txn_months</th>\n",
       "      <th>average_monthly_value_last_6_months</th>\n",
       "      <th>gross_14_day_limit</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>new_final_limit</th>\n",
       "      <th>is_qualified</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>2023-02-26</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>2023-02-26</td>\n",
       "      <td>2022-09-19</td>\n",
       "      <td>86014567.75</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.433576e+07</td>\n",
       "      <td>5.017516e+06</td>\n",
       "      <td>5017600.0</td>\n",
       "      <td>3000000.0</td>\n",
       "      <td>2941.176471</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>2023-02-28</td>\n",
       "      <td>38.0</td>\n",
       "      <td>Peter</td>\n",
       "      <td>2023-02-28</td>\n",
       "      <td>2022-09-17</td>\n",
       "      <td>22944637.31</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.824106e+06</td>\n",
       "      <td>1.338437e+06</td>\n",
       "      <td>1338500.0</td>\n",
       "      <td>1338500.0</td>\n",
       "      <td>1312.254902</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>1131150.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "0   101486430          2020-10-11             2023-02-26   \n",
       "1   102500107          2020-01-04             2023-02-28   \n",
       "\n",
       "   age_on_network_months              vendors  \\\n",
       "0                   29.0  Selemani Nyamirambo   \n",
       "1                   38.0                Peter   \n",
       "\n",
       "  most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "0                           2023-02-26                        2022-09-19   \n",
       "1                           2023-02-28                        2022-09-17   \n",
       "\n",
       "   total_value_last_6_months  trading_span_past_6_months  unique_sales_months  \\\n",
       "0                86014567.75                         6.0                  6.0   \n",
       "1                22944637.31                         6.0                  6.0   \n",
       "\n",
       "   ...  diff_last_txn_months  average_monthly_value_last_6_months  \\\n",
       "0  ...                   0.0                         1.433576e+07   \n",
       "1  ...                   0.0                         3.824106e+06   \n",
       "\n",
       "   gross_14_day_limit  adjusted_14_day_limit  final_14_day_limit_rwf  \\\n",
       "0        5.017516e+06              5017600.0               3000000.0   \n",
       "1        1.338437e+06              1338500.0               1338500.0   \n",
       "\n",
       "   final_14_day_limit_usd  scoring_refresh_date  \\\n",
       "0             2941.176471            2023-03-15   \n",
       "1             1312.254902            2023-03-15   \n",
       "\n",
       "                      model_version new_final_limit  is_qualified  \n",
       "0  2023-001[2023-02-16, 2023-03-15]       2757600.0          True  \n",
       "1  2023-001[2023-02-16, 2023-03-15]       1131150.0          True  \n",
       "\n",
       "[2 rows x 21 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f12f5710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>earliest_sales_date</th>\n",
       "      <th>most_recent_sales_date</th>\n",
       "      <th>age_on_network_months</th>\n",
       "      <th>vendors</th>\n",
       "      <th>most_recent_sales_date_last_6_months</th>\n",
       "      <th>earliest_sales_date_last_6_months</th>\n",
       "      <th>total_value_last_6_months</th>\n",
       "      <th>trading_span_past_6_months</th>\n",
       "      <th>unique_sales_months</th>\n",
       "      <th>...</th>\n",
       "      <th>average_monthly_value_last_6_months</th>\n",
       "      <th>gross_14_day_limit</th>\n",
       "      <th>adjusted_14_day_limit</th>\n",
       "      <th>final_14_day_limit_rwf</th>\n",
       "      <th>final_14_day_limit_usd</th>\n",
       "      <th>scoring_refresh_date</th>\n",
       "      <th>model_version</th>\n",
       "      <th>new_final_limit_x</th>\n",
       "      <th>is_qualified</th>\n",
       "      <th>new_final_limit_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101486430</td>\n",
       "      <td>2020-10-11</td>\n",
       "      <td>2023-02-26</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Selemani Nyamirambo</td>\n",
       "      <td>2023-02-26</td>\n",
       "      <td>2022-09-19</td>\n",
       "      <td>86014567.75</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.433576e+07</td>\n",
       "      <td>5.017516e+06</td>\n",
       "      <td>5017600.0</td>\n",
       "      <td>3000000.0</td>\n",
       "      <td>2941.176471</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>2757600.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2757600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102500107</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>2023-02-28</td>\n",
       "      <td>38.0</td>\n",
       "      <td>Peter</td>\n",
       "      <td>2023-02-28</td>\n",
       "      <td>2022-09-17</td>\n",
       "      <td>22944637.31</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.824106e+06</td>\n",
       "      <td>1.338437e+06</td>\n",
       "      <td>1338500.0</td>\n",
       "      <td>1338500.0</td>\n",
       "      <td>1312.254902</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>1131150.0</td>\n",
       "      <td>True</td>\n",
       "      <td>1131150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102505180</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Xavier</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>2022-09-25</td>\n",
       "      <td>14434069.47</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.405678e+06</td>\n",
       "      <td>6.735899e+05</td>\n",
       "      <td>673600.0</td>\n",
       "      <td>673600.0</td>\n",
       "      <td>660.392157</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>490500.0</td>\n",
       "      <td>True</td>\n",
       "      <td>673600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>103383876</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Sultan</td>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>2022-09-02</td>\n",
       "      <td>27480595.75</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.580099e+06</td>\n",
       "      <td>1.603035e+06</td>\n",
       "      <td>1603100.0</td>\n",
       "      <td>1603100.0</td>\n",
       "      <td>1571.666667</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>1387050.0</td>\n",
       "      <td>True</td>\n",
       "      <td>1387050.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>106772260</td>\n",
       "      <td>2020-04-09</td>\n",
       "      <td>2022-11-17</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Karangwa</td>\n",
       "      <td>2022-11-17</td>\n",
       "      <td>2022-11-02</td>\n",
       "      <td>8915677.96</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.485946e+06</td>\n",
       "      <td>5.200812e+05</td>\n",
       "      <td>520100.0</td>\n",
       "      <td>520100.0</td>\n",
       "      <td>509.901961</td>\n",
       "      <td>2023-03-15</td>\n",
       "      <td>2023-001[2023-02-16, 2023-03-15]</td>\n",
       "      <td>1515700.0</td>\n",
       "      <td>True</td>\n",
       "      <td>520100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id earliest_sales_date most_recent_sales_date  \\\n",
       "0   101486430          2020-10-11             2023-02-26   \n",
       "1   102500107          2020-01-04             2023-02-28   \n",
       "2   102505180          2020-01-02             2023-02-01   \n",
       "3   103383876          2020-01-02             2023-02-01   \n",
       "4   106772260          2020-04-09             2022-11-17   \n",
       "\n",
       "   age_on_network_months              vendors  \\\n",
       "0                   29.0  Selemani Nyamirambo   \n",
       "1                   38.0                Peter   \n",
       "2                   37.0               Xavier   \n",
       "3                   37.0               Sultan   \n",
       "4                   32.0             Karangwa   \n",
       "\n",
       "  most_recent_sales_date_last_6_months earliest_sales_date_last_6_months  \\\n",
       "0                           2023-02-26                        2022-09-19   \n",
       "1                           2023-02-28                        2022-09-17   \n",
       "2                           2023-02-01                        2022-09-25   \n",
       "3                           2023-02-01                        2022-09-02   \n",
       "4                           2022-11-17                        2022-11-02   \n",
       "\n",
       "   total_value_last_6_months  trading_span_past_6_months  unique_sales_months  \\\n",
       "0                86014567.75                         6.0                  6.0   \n",
       "1                22944637.31                         6.0                  6.0   \n",
       "2                14434069.47                         6.0                  5.0   \n",
       "3                27480595.75                         6.0                  6.0   \n",
       "4                 8915677.96                         1.0                  1.0   \n",
       "\n",
       "   ...  average_monthly_value_last_6_months  gross_14_day_limit  \\\n",
       "0  ...                         1.433576e+07        5.017516e+06   \n",
       "1  ...                         3.824106e+06        1.338437e+06   \n",
       "2  ...                         2.405678e+06        6.735899e+05   \n",
       "3  ...                         4.580099e+06        1.603035e+06   \n",
       "4  ...                         1.485946e+06        5.200812e+05   \n",
       "\n",
       "   adjusted_14_day_limit  final_14_day_limit_rwf  final_14_day_limit_usd  \\\n",
       "0              5017600.0               3000000.0             2941.176471   \n",
       "1              1338500.0               1338500.0             1312.254902   \n",
       "2               673600.0                673600.0              660.392157   \n",
       "3              1603100.0               1603100.0             1571.666667   \n",
       "4               520100.0                520100.0              509.901961   \n",
       "\n",
       "   scoring_refresh_date                     model_version new_final_limit_x  \\\n",
       "0            2023-03-15  2023-001[2023-02-16, 2023-03-15]         2757600.0   \n",
       "1            2023-03-15  2023-001[2023-02-16, 2023-03-15]         1131150.0   \n",
       "2            2023-03-15  2023-001[2023-02-16, 2023-03-15]          490500.0   \n",
       "3            2023-03-15  2023-001[2023-02-16, 2023-03-15]         1387050.0   \n",
       "4            2023-03-15  2023-001[2023-02-16, 2023-03-15]         1515700.0   \n",
       "\n",
       "  is_qualified  new_final_limit_y  \n",
       "0         True          2757600.0  \n",
       "1         True          1131150.0  \n",
       "2         True           673600.0  \n",
       "3         True          1387050.0  \n",
       "4         True           520100.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_limits_df = pd.merge(df, final, on = 'customer_id', how = 'outer')\n",
    "\n",
    "current_limits_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "87d52eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customer_id                                                    102505180\n",
       "earliest_sales_date                                           2020-01-02\n",
       "most_recent_sales_date                                        2023-02-01\n",
       "age_on_network_months                                               37.0\n",
       "vendors                                                           Xavier\n",
       "most_recent_sales_date_last_6_months                          2023-02-01\n",
       "earliest_sales_date_last_6_months                             2022-09-25\n",
       "total_value_last_6_months                                    14434069.47\n",
       "trading_span_past_6_months                                           6.0\n",
       "unique_sales_months                                                  5.0\n",
       "trading_consistency_last_6_months                                    0.8\n",
       "diff_last_txn_months                                                 1.0\n",
       "average_monthly_value_last_6_months                          2405678.245\n",
       "gross_14_day_limit                                           673589.9086\n",
       "adjusted_14_day_limit                                           673600.0\n",
       "final_14_day_limit_rwf                                          673600.0\n",
       "final_14_day_limit_usd                                        660.392157\n",
       "scoring_refresh_date                                          2023-03-15\n",
       "model_version                           2023-001[2023-02-16, 2023-03-15]\n",
       "new_final_limit_x                                               490500.0\n",
       "is_qualified                                                        True\n",
       "new_final_limit_y                                               490500.0\n",
       "Name: 2, dtype: object"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_limits_df.iloc[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5098f68d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fiona.kamau",
   "language": "python",
   "name": "fiona.kamau"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
